[[customLogging]]
= Settings for Custom Logging in Tigase
:author: Daniel Wisnewski <daniel.wisnewski@tigase.net>
:version: v2.0 April 2017. Reformatted for v8.0.0.

Logging can be an important tool to monitor your server's health and performance. Logging may be controlled and customized on a per-component basis.

A `logging` bean has been implemented to allow more fine configuration of each component.

[source,config]
-----
logging () {
    rootLevel = CONFIG
    'packet-debug-full' = true
    loggers = {
        'tigase.server' = {
            level = ALL
        }
        'tigase.conf' = {
            level = FINEST
        }
    }
    handlers = {
        ' java.util.logging.FileHandler' = {
            level = ALL
            append = true
            count = 5
            formatter = 'tigase.util.LogFormatter'
            limit = 10000000
            pattern = 'logs/tigase.log'
        }
        'java.util.logging.ConsoleHandler' = {
            level = WARNING
            formatter = 'tigase.util.LogFormatter'
        }
    }
}
-----
You only need to specify the settings you wish to customize, otherwise they will be left as default.

- `packet-debug-full` - controls whether log entries should be obfuscated (all CData of all elements will be replaced by `CData size: <length in bytes of the replaced string>`) or not; default: `false`.
- `rootLevel` - Defines the root level of logging for all components not otherwise defined. Default is CONFIG
- `loggers` - Defines the level of logging for packages running in tigase server. This is similar to the --debug setting, however you must use `tigase.{package}` format. Default is NONE.
- `handlers` - Defines the level of logging for File output and Console output.
. `FileHandler` - is the file output for log files, with the following options:
.. `level` - specifies the level of logs to be written, default is ALL.
.. `append` - whether to append to the log or replace it during restart. Default is true.
.. `count` - number of individual log files to keep at set limit. Default is 5. (default settings will continue appending logs until 5 files at 10MB are reached, then the oldest file will be overwritten.)
.. `formatter` - specifies the package to format logging output. Default is tigase.util.LogFormatter.
.. `limit` - Byte limit for each log file. Default is 10000000 or 10MB.
.. `pattern` - Directory and filename of the log file with respect to the Tigase installation directory. Default is logs/tigase.log.
. `ConsoleHandler` - Determines the formatting for Tigase output to console.
.. `level` - specifies the level of logs to be written, default is WARNING.
.. `formatter` - specifies the package to format logging output. Default is tigase.util.LogFormatter.

== Disabling colored output

If for some reason you don't want colored output in the logs you can disable it by setting `disable_logger_color` to `true`. For convenience, you can uncomment in `etc/tigase.conf` following line:

[source,bash]
----
#DISABLE_LOGGER_COLOR=" -Ddisable_logger_color=true "
----

== Alternate loggers in Tigase - Logback

It's possible to use Logback for logging purposes, which offers certain interesting features (async logging, better control over log rotation, on the fly changing logging configuration)

Requirements:
* slf4j-api.jar (provided in `-dist-max` package)
* jul-to-slf4j.jar (provided in `-dist-max` package)
* desired logger libraries (for logback it's `logback-classic.jar` and `logback-core.jar` (provided in -dist-max).

Configuration boils down to adding slf4j bridge handler to the list of build-in Java Logger handlers configuration, which in Tigase translates to adding following line to `etc/config.tdsl`:

[source,bash]
----
logging () {
    rootHandlers = [ 'java.util.logging.ConsoleHandler', 'java.util.logging.FileHandler', 'org.slf4j.bridge.SLF4JBridgeHandler' ]
}
----

After that `etc/logback.xml` configuration file will be used.

As stated in [jul-to-slf4j bridge documentation](http://www.slf4j.org/legacy.html#jul-to-slf4j) it's essential to include `LevelChangePropagator` to eliminate translation overhead for disabled log statements:

[source,xml]
----
<configuration debug="true">
  <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator"/>
  ...
</configuration>
----

NOTE, that it may be prudent to remove configuration of all old JUL logger by appending following to `etc/logback.xml` configuration:

[source,xml]
----
<configuration debug="true">
  <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator"/>
    <resetJUL>true</resetJUL>
</configuration>
----
