= DSL file format

In previous Tigase XMPP Server releases configuration was stored in properties based configuration file. From Tigase XMPP Server 7.2.0 release it will be possible
// recommended ??
to use new DSL based configuration file format. This file format was inspired by Groovy language syntax and new core feature of Tigase XMPP Server - Tigase Kernel Framework.

== Why new format?
In properties configuration format each line contained key and value with optional definition of type of stored value:
----
c2s/ports[i]=5222,5223
----
where `c2s/ports` was name of property, `[i]` defined that type of value is array of integers, and `5222,5223` was comma separated list of values.

This format worked but in fact `c2s/ports` was not name of property you configured but key which was later split on `/` char to parts which defined by names path to property which name was in last part.
From that you can see that it was domain based setting of properties.

Except from this multi-part keys we also used properties starting with `--` which were global properties accessible for every part of application, i.e.: to add new component and set some properties you needed to write:
----
--comp-name-1=pubsub
--comp-class-1=tigase.pubsub.PubSubComponent
pubsub/test[B]=true
pubsub/pubsub-repo-url="jdbc:XXXX:XXXX/db_name"
----
This lead to mistakes like duplicated definition of name and class for same number of component or redefined property value in other place of a configuration file - especially in cases where configuration was big.

In this configuration structure it was hard to tell where is configuration for particular component or what databases this installation uses. This could be defined all over the file.

In this release we are introducing Tigase Kernel Framework, which allows to configure beans in configuration file and even define usage of new beans loaded from external jars which can modify behavior of Tigase components. This would make configuration file even more complex, difficult and less readable.

== What is DSL?
DSL stands for domain-specific language - in this case language created for storage of configuration.

Now we use domain based configuration which means that our configuration file is not a flat key=value storage but it defines objects, it's properties and assigned values.

To illustrate it better let's start with a simple example. In properties file in order to configure PubSub component named `pubsub` you would use following properties:
----
--comp-name-1=pubsub
--comp-class-1=tigase.pubsub.PubSubComponent
pubsub/test[B]=true
----
In DSL based configuration this would be replaced by following block
----
pubsub (class: tigase.pubsub.PubSubComponent) {
    # comment
    test = true
}
----
in which we define bean with name `pubsub` and set it's class inside `()` block to `tigase.pubsub.PubSubComponent`.
We also use block between `{}` chars to define properties which are related to bean.
Which means this properties will be passed only to this instance of Tigase PubSub Component, same as it was before where we needed to add prefix.
Entries after `\#` are comments, to pass `#` you need to wrap whole part containing it in `''`, ie. `'test#242'`

=== Setting property
To set property you just write property name followed by `=` and value to set. This is always done in context of bean which configuration property you want to set.
----
test=true
----

=== Setting global property
Like in properties file it is still possible to use property names starting with `--` without any context or any other properties at global scope. Format is the same as in case of setting property but they are defined without scope (in global scope).

=== Defining bean
You can configure bean by using following format:
----
beanName (class: className, active: activeValue, exportable: exportableValue) {
    # scope of bean properties
}
----
where `beanName` is name under which you want to configure bean.
Inside block between `(` and `)` you can define:

* `class` which will be used as a bean, in example above we set class as `className`. *_(default: if you try to configure bean under name which has default class assigned with it in Tigase framework then this assigned class will be used. In other case you need to pass name of class to use as a bean)_*
* `active` (boolean) whether you want the bean to be active or not (beans with `active` set to `false` are not loaded). *_(default: true)_*
* `exportable` (boolean) defines if this bean should be exported and available for use for beans in inner scopes. This is advanced option in most cases it is recommended to omit this field in configuration. *_(default: false)_*

=== Configuring bean
If you know that bean is defined and you do not want to change it's activity or class then you can just pass properties to configure bean in following way:
----
beanName {
    # scope of bean properties
    test = true
}
----
where `beanName` is name of bean to configure and `test` is name of property to set to `true` in this bean.

=== Format of values
In properties based configuration file every property was defined as a string and only by defining expected format it was properly converted to expected value.
In DSL it is possible to set values in two ways:

as a plain string::
Very similar to properties based configuration, in fact values are passed in same format and later are converted to correct type by checking type expected by bean. _(Not recommended)_

as an object::
Using this format you set list as a list and integer is set as an integer.
string::: Wrap it in `''`, ie. to set `test` as string you use `'test'`
integer::: Just put value, ie. to set `543` use `543`
long::: Put value and follow it with `L`, ie. to set `23645434` as long use `23645434L`
float::: Put value and follow it with `f`, ie. to set `231.342` use `231.342f`
boolean::: To set value just use `true` or `false`
list::: Lists can be of many types and to make it simple we decided to use as a comma separated list of values in proper format wrapped in `[]`. _(You can write it in multiple lines if you want)_
* of strings - `[ 'alfa', 'beta', 'gamma' ]`
* of integers - `[ 1, 2, 3, 4]`
map::: Maps can be written as a block of properties wrapped in `{}`
----
{
  test = true
  ssl = false
  ssl-certificate = '/test/cert.pem'
}
----

== Example configuration file in DSL
----
# Enable cluster mode
--cluster-mode = true
# Enable debugging for server and xmpp.impl
--debug = server,xmpp.impl
# Set list of virtual hosts (old way)
--virt-hosts = zeus,test

# Configure list of administrator jids
admins = [ 'admin@zeus', 'http@macbook-pro-andrzej.local' ]
# Set config type
config-type = '--gen-config-def'

# Configure dataSource bean with database configuration
dataSource {
    # Configure default data source (using default implementation so class is omitted)
    default () {
        uri = 'jdbc:postgresql://127.0.0.1/tigase?user=test&password=test&autoCreateUser=true'
    }

    # Configure data source with name exaple.com (will be used by domain example.com)
    example.com () {
        uri = 'jdbc:mysq://127.0.0.1/example?user=test&password=test&autoCreateUser=true'
    }
}

# Configure C2S component
c2s {
    # Enable Stream Management bean
    'urn:xmpp:sm:3' () {}

    # Register tigase.server.xmppclient.SeeOtherHostDualIP as seeOtherHost bean
    seeOtherHost (class: tigase.server.xmppclient.SeeOtherHostDualIP) {}

    # Add additional port 5224 which is SSL port
    connections () {
        '5224' () {
	         socket = ssl
	      }
    }
}

# Configure HTTP API component
http {
    # Set list of API keys
    api-keys = [ 'test1234' ]
}

# Register pubsub-2 (class is passed as pubsub-2 name do not have default class assigned)
pubsub-2 (class: tigase.pubsub.cluster.PubSubComponentClustered) {
    # Set configuration bean properties
    pubsubConfig {
        persistentPep = true
    }
    # Use tigase.pubsub.cluster.ClusteredNodeStrategy as advanced clustering strategy
    strategy (class: tigase.pubsub.cluster.ClusteredNodeStrategy) {}
}

# Configure Session Manager
sess-man {
    # Here we enable pep, urn:xmpp:mam:1 processors and disable message-archive-xep-0136 procesor
    pep () {}
    'urn:xmpp:mam:1' () {}
    message-archive-xep-0136 (active: false) {}

    # Define class used as clustering strategy (it is different than default so class is required)
    strategy (class: tigase.server.cluster.strategy.OnlineUsersCachingStrategy) {}
}
----
